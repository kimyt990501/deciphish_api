version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: phishing-detector-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-phishing_detector}
      MYSQL_USER: ${MYSQL_USER:-phishing_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-phishing_password}
      TZ: Asia/Seoul
    ports:
      - "33306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - phishing-detector-network

  phishing-detector-api:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: phishing-detector-api
    ports:
      - "8300:8300"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Seoul
      # MySQL 연결 설정
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER:-phishing_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-phishing_password}
      - MYSQL_DB=${MYSQL_DB:-phishing_detector}
      # 동시성 처리 설정
      - CONCURRENT_DETECTION_LIMIT=${CONCURRENT_DETECTION_LIMIT:-10}
      - MAX_WORKERS=${MAX_WORKERS:-2}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # 로그 디렉토리 마운트
      - ./logs:/app/logs
      # 환경 변수 파일 마운트
      - ./.env:/app/.env:ro
      # 모델 파일 마운트 (이미지 크기 절약)
      - ./app/services/crp_classifier/models:/app/app/services/crp_classifier/models:ro
      - ./app/services/favicon_service/data:/app/app/services/favicon_service/data:ro
    restart: unless-stopped
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - phishing-detector-network

  # 개발용 서비스 (선택사항)
  phishing-detector-api-dev:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: phishing-detector-api-dev
    ports:
      - "8301:8300"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=debug
      - TZ=Asia/Seoul
      # MySQL 연결 설정
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER:-phishing_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-phishing_password}
      - MYSQL_DB=${MYSQL_DATABASE:-phishing_detector}
      # 동시성 처리 설정 (개발 환경)
      - CONCURRENT_DETECTION_LIMIT=${CONCURRENT_DETECTION_LIMIT:-5}
      - MAX_WORKERS=${MAX_WORKERS:-1}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
      # 환경 변수 파일 마운트
      - ./.env:/app/.env:ro
      # 모델 파일 마운트
      - ./app/services/crp_classifier/models:/app/app/services/crp_classifier/models:ro
      - ./app/services/favicon_service/data:/app/app/services/favicon_service/data:ro
    restart: unless-stopped
    depends_on:
      - mysql
    profiles:
      - dev
    networks:
      - phishing-detector-network

  # phpMyAdmin (선택사항 - MySQL 관리용)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phishing-detector-phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER:-phishing_user}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-phishing_password}
    ports:
      - "8080:80"
    depends_on:
      - mysql
    restart: unless-stopped
    networks:
      - phishing-detector-network
    profiles:
      - with-phpmyadmin

volumes:
  mysql_data:

networks:
  phishing-detector-network:
    driver: bridge 